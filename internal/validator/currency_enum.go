// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package validator

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"strings"
)

const (
	CurrencyEUR Currency = "EUR"
	CurrencyUSD Currency = "USD"
)

var ErrInvalidCurrency = fmt.Errorf("not a valid Currency, try [%s]", strings.Join(_CurrencyNames, ", "))

var _CurrencyNames = []string{
	string(CurrencyEUR),
	string(CurrencyUSD),
}

// CurrencyNames returns a list of possible string values of Currency.
func CurrencyNames() []string {
	tmp := make([]string, len(_CurrencyNames))
	copy(tmp, _CurrencyNames)
	return tmp
}

// CurrencyValues returns a list of the values for Currency
func CurrencyValues() []Currency {
	return []Currency{
		CurrencyEUR,
		CurrencyUSD,
	}
}

// String implements the Stringer interface.
func (x Currency) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Currency) IsValid() bool {
	_, err := ParseCurrency(string(x))
	return err == nil
}

var _CurrencyValue = map[string]Currency{
	"EUR": CurrencyEUR,
	"USD": CurrencyUSD,
}

// ParseCurrency attempts to convert a string to a Currency.
func ParseCurrency(name string) (Currency, error) {
	if x, ok := _CurrencyValue[name]; ok {
		return x, nil
	}
	return Currency(""), fmt.Errorf("%s is %w", name, ErrInvalidCurrency)
}

func (x Currency) Ptr() *Currency {
	return &x
}

// MarshalText implements the text marshaller method.
func (x Currency) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Currency) UnmarshalText(text []byte) error {
	tmp, err := ParseCurrency(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errCurrencyNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Currency) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Currency("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseCurrency(v)
	case []byte:
		*x, err = ParseCurrency(string(v))
	case Currency:
		*x = v
	case *Currency:
		if v == nil {
			return errCurrencyNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errCurrencyNilPtr
		}
		*x, err = ParseCurrency(*v)
	default:
		return errors.New("invalid type for Currency")
	}

	return
}

// Value implements the driver Valuer interface.
func (x Currency) Value() (driver.Value, error) {
	return x.String(), nil
}

// Set implements the Golang flag.Value interface func.
func (x *Currency) Set(val string) error {
	v, err := ParseCurrency(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *Currency) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *Currency) Type() string {
	return "Currency"
}

type NullCurrency struct {
	Currency Currency
	Valid    bool
	Set      bool
}

func NewNullCurrency(val interface{}) (x NullCurrency) {
	err := x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	_ = err            // make any errcheck linters happy
	return
}

// Scan implements the Scanner interface.
func (x *NullCurrency) Scan(value interface{}) (err error) {
	if value == nil {
		x.Currency, x.Valid = Currency(""), false
		return
	}

	err = x.Currency.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullCurrency) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.Currency.String(), nil
}

// MarshalJSON correctly serializes a NullCurrency to JSON.
func (n NullCurrency) MarshalJSON() ([]byte, error) {
	const nullStr = "null"
	if n.Valid {
		return json.Marshal(n.Currency)
	}
	return []byte(nullStr), nil
}

// UnmarshalJSON correctly deserializes a NullCurrency from JSON.
func (n *NullCurrency) UnmarshalJSON(b []byte) error {
	n.Set = true
	var x interface{}
	err := json.Unmarshal(b, &x)
	if err != nil {
		return err
	}
	err = n.Scan(x)
	return err
}
